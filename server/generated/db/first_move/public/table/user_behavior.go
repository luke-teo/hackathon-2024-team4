//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserBehavior = newUserBehaviorTable("public", "user_behavior", "")

type userBehaviorTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	UserID    postgres.ColumnString
	Date      postgres.ColumnDate
	Score     postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserBehaviorTable struct {
	userBehaviorTable

	EXCLUDED userBehaviorTable
}

// AS creates new UserBehaviorTable with assigned alias
func (a UserBehaviorTable) AS(alias string) *UserBehaviorTable {
	return newUserBehaviorTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserBehaviorTable with assigned schema name
func (a UserBehaviorTable) FromSchema(schemaName string) *UserBehaviorTable {
	return newUserBehaviorTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserBehaviorTable with assigned table prefix
func (a UserBehaviorTable) WithPrefix(prefix string) *UserBehaviorTable {
	return newUserBehaviorTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserBehaviorTable with assigned table suffix
func (a UserBehaviorTable) WithSuffix(suffix string) *UserBehaviorTable {
	return newUserBehaviorTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserBehaviorTable(schemaName, tableName, alias string) *UserBehaviorTable {
	return &UserBehaviorTable{
		userBehaviorTable: newUserBehaviorTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUserBehaviorTableImpl("", "excluded", ""),
	}
}

func newUserBehaviorTableImpl(schemaName, tableName, alias string) userBehaviorTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		UserIDColumn    = postgres.StringColumn("user_id")
		DateColumn      = postgres.DateColumn("date")
		ScoreColumn     = postgres.IntegerColumn("score")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, DateColumn, ScoreColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, DateColumn, ScoreColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return userBehaviorTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		// Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		Date:      DateColumn,
		Score:     ScoreColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
